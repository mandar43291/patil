# I write my own knn by using some inbuilt liabrary.


def edu(a,b):
    return distance.euclidean(a,b)


class MarvellousKNN():
    
    
    
    def fit(self,Trainingdata,Trainingtarget):
        self.Trainingdata = Trainingdata
        self.Trainingtarget = Trainingtarget
        
    def predict(self, Testdata):
        
        prediction = []
        for row in Testdata:
            lable = self.Dist(row)
            prediction.append(lable)
        return  prediction
            
            
    
    
    def Dist(self,row):
        bestdistance = edu(row,self.Trainingdata[0])
        bestindex = 0
        for i in range(1, len(self.Trainingdata)):
            distance = edu(row,self.Trainingdata[i])
            
            if distance <bestdistance:
                 bestdistance = distance
                 bestindex = i
        return self.Trainingtarget[bestindex]
